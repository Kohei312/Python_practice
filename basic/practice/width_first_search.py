# 幅優先探索

def breadth_first_search(H, W, s, g, S):
    """
    H: 迷路の高さ                    # maze_height
    W: 迷路の幅                      # maze_width
    s: スタート地点(y, x)             # start_point
    g: ゴール地点(y, x)               # goal_point
    S: 迷路図（対象となる文字列のリスト） # maze
    """
    # write code here
    
        ## 迷路の座標と、配列の中のカウント方法がそれぞれ違う点に注意!!
        ## 迷路の座標 => [1,1]が原点 => 配列で扱うときは、配列内の値を常に -1 するように
    maze_list = [list(w) for w in S] # [["#", "#", ...]]のように書き換えられる
    print(maze_list)
    maze_list[s[0]-1][s[1]-1] = 0 # => maze_list[(2)-1][(2)-1] => maze_list[1][1]（スタート地点）を 0 と置き換える
    search_position = [] #探索する[y,x]
    search_position.append([s[0]-1, s[1]-1]) ## 新しいものが一番最後に入る => 先に入れたものが前に行く
        
    while current_position := search_position.pop(0):# 一番最初に入った要素を取り出す => 先入れ先出しの状況になる
        current_y, current_x = current_position[0], current_position[1]
        current_position_counts = maze_list[current_y][current_x] # 今いる場所の値が変える [y,x]

        for append_y, append_x in [[1, 0], [-1, 0], [0, -1],[0,1]]: # 次に進む方向を探索する
            next_y,next_x = current_y + append_y, current_x + append_x
            if any((next_y < 0, next_x < 0, next_y >= H, next_x >= W)):
               continue
            if maze_list[next_y][next_x] == '.':
               maze_list[next_y][next_x] = current_position_counts + 1 # 現在位置[y,x]に、[y+1,x+1]という操作を行う
               search_position.append([next_y, next_x]) # 次の探索場所を追加して, whileで次に取り出される

            if next_y == g[0]-1 and next_x == g[1]-1 : ## ゴールに到達したときの処理
               print(current_position_counts + 1)
               return

# Ss[0]の場合 => 11
# ########
# #s.....#
# #.######
# #..#g..#
# #..##..#
# ##.....#
# ########
         

Hs = [7, 5, 50]
Ws = [8, 8, 50]
ss = [[2, 2], [2, 2], [2, 2]]
gs = [[4, 5], [2, 4], [49, 49]]
Ss = [
    ['########','#......#','#.######','#..#...#','#..##..#','##.....#','########'],
    ['########','#.#....#','#.###..#','#......#','########'],

]
breadth_first_search(Hs[0], Ws[0], ss[0], gs[0], Ss[0]) # 11
breadth_first_search(Hs[1], Ws[1], ss[1], gs[1], Ss[1]) # 10
breadth_first_search(Hs[2], Ws[2], ss[2], gs[2], Ss[2]) # 94
