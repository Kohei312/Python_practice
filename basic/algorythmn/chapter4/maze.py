## 番兵 : 終了条件としてリストの最後に付加するデータのこと
## →迷路の例だと、迷路の外堀を埋める 9 の壁が該当する.

######################

    # 0 : 通路
    # 1 : ゴール => 成功条件
    # 2 : 通過済みルート
    # 9 : 壁、通れないところ => 失敗条件

######################

maze = [
    [9,9,9,9,9,9,9,9,9,9,9,9],
    [9,0,0,0,9,0,0,0,0,0,0,9],
    [9,0,9,0,0,0,9,9,0,9,9,9],
    [9,0,9,9,0,9,0,0,0,9,0,9],
    [9,0,0,0,9,0,0,9,9,0,9,9],
    [9,9,9,0,0,9,0,9,0,0,0,9],
    [9,0,0,0,9,0,9,0,0,9,1,9],
    [9,0,9,0,0,0,0,9,0,0,9,9],
    [9,0,0,9,0,9,0,0,9,0,0,9],
    [9,0,9,0,9,0,9,0,0,9,0,9],
    [9,0,0,0,0,0,0,9,0,0,0,9],
    [9,9,9,9,9,9,9,9,9,9,9,9]
]

pos = [[1,1,0]] ##[ [x座標, y座標, 移動回数] ]

while len(pos) > 0:
    x,y,depth = pos.pop(0) # pos内の末尾から各要素を取り出し、x座標, y座標, 移動回数を初期化する

    if maze[x][y] == 1: ## ゴール地点に到達したら、ループを止める
        print(depth)
        break

    maze[x][y] = 2 ## 通過したルートは、盤上の 0 を 2 に書き換える

    ## 進行方向を決める
    if maze[x - 1][y] < 2: ## 上に進めるとき
        pos.append([x - 1, y, depth + 1])
    if maze[x + 1][y] < 2: ## 下に進めるとき
        pos.append([x + 1, y, depth + 1])
    if maze[x][y - 1] < 2: ## 左に進めるとき
        pos.append([x, y - 1, depth + 1])
    if maze[x][y + 1] < 2: ## 右に進めるとき
        pos.append([x, y + 1, depth + 1])
