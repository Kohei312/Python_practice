## 通りがけ順 : 2分木の左側の子ノードをたどったあとに処理し、続いて右側の子ノードを処理する

tree = [ [1,2],[3,4],[5,6],[7,8],[9,10],[11,12],[13,14],[],[],[],[],[],[],[],[],[] ]

def search(pos):

    # print("pos : {}, len : {}".format(pos,len(tree[pos])))
    if len(tree[pos]) == 2: # 子が2つあるとき
        search(tree[pos][0])
        print("ノード2つ : {}".format(pos)) # 左ノードと右ノードの間に出力

        search(tree[pos][1])

    elif len(tree[pos]) == 1: # 子が1つ

        search(tree[pos][0])
        print("ノード1つ : {}".format(pos))

    else: # 子なし
        print("ノード0つ : {}".format(pos))

search(0)

# 0 : tree[0]へ => 10のあと出力

## 1 : tree[1]へ => 3 => 8のあと出力
### 3 : tree[3]へ => 7のあと出力
#### 7 → 空. 出力
#### 8 → 空. 終了 => 3のあと出力

### 4 : tree[4]へ => 9のあと出力
#### 9 → 空. 1のあと出力
#### 10 → 空. 4のあと出力

## 2 : tree[2]へ => 12のあと出力
### 5 : tree[5]へ => 11のあと出力 
#### 11 → 空. 0のあと出力
#### 12 → 空. 5のあと出力

### 6 : tree[6]へ => 13のあと出力
#### 13 → 空. 2のあと出力
#### 14 → 空. 6のあと出力